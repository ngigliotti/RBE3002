#!/usr/bin/env python

#Author Joseph St. Germain 
#Co-Authur Arthur lockmans drive smooth function


import rospy, tf, numpy, math
from kobuki_msgs.msg import BumperEvent
from std_msgs.msg import String
from geometry_msgs.msg import Twist, Pose
from nav_msgs.msg import Odometry
from geometry_msgs.msg import PoseStamped
from tf.transformations import euler_from_quaternion


wheel_rad = 3.5 / 100.0 #cm
wheel_base = 23.0 / 100.0 #cm


def publishTwist(lin_Vel, ang_Vel):
    """Send a movement (twist) message."""
    global pub
    msg = Twist()
    msg.linear.x = lin_Vel
    msg.angular.z = ang_Vel
    pub.publish(msg)


def navToPose(goal):
    """Drive to a goal subscribed to from /move_base_simple/goal"""
    #compute angle required to make straight-line move to desired pose
    global xPosition
    global yPosition
    global theta
    #capture desired x and y positions
    desiredY = goal.pose.position.y
    desiredX = goal.pose.position.x
    #capture desired angle
    quat = goal.pose.orientation
    q = [quat.x, quat.y, quat.z, quat.w]
    roll, pitch, yaw = euler_from_quaternion(q)
    desiredT = yaw * (180.0/math.pi)
    #compute distance to target
    distance = math.sqrt((desiredX - xPosition)**2 + (desiredY - yPosition)**2)
    #compute initial turn amount
    angle = math.degrees(math.atan2(desiredY - yPosition, desiredX - xPosition))


    print "spin!" #turn to calculated angle
    rotate(0.5, angle)
    print "move!" #move in straight line specified distance to new pose
    driveStraight(0.25, distance)
    rotate(0.5, desiredT)
    rospy.sleep(.15)
    print "spin!" #spin to final angle 
    print "done"



#This function accepts two wheel velocities and a time interval.
def spinWheels(u1, u2, time):
    """This function accepts two wheel velocities and a time interval."""
    global pub

    r = wheel_rad
    b = wheel_base
    #compute wheel speeds
    u = (u1+u2)/2  #Determines the linear velocity of base based on the wheel
    w = (u2-u1)/(b)  #Determines the angular velocity of base on the wheels.
    start = rospy.Time().now().secs
    #create movement and stop messages
    move_msg = Twist() #creates a move_msg object inheriting type from the Twist() class
    move_msg.linear.x = u #sets linear velocity
    move_msg.angular.z = w #sets amgular velocity (Populates messages with data.)

    stop_msg = Twist()
    stop_msg.linear.x = 0
    stop_msg.angular.z = 0
    #publish move message for desired time
    while(rospy.Time().now().secs - start < time and not rospy.is_shutdown()): # waits for said time and checks for ctrl C
        pub.publish(move_msg) #publishes the move_msg
    pub.publish(stop_msg)


#This function accepts a speed and a distance for the robot to move in a straight line
def driveStraight(speed, distance):
    """This function accepts a speed and a distance for the robot to move in a straight line"""
    global pose

    initialX = pose.position.x
    initialY = pose.position.y
    atTarget = False
    #Loop until the distance between the attached frame and the origin is equal to the
    #distance specified 
    while (not atTarget and not rospy.is_shutdown()):
        currentX = pose.position.x
        currentY = pose.position.y
        currentDistance = math.sqrt((currentX-initialX)**2 + (currentY-initialY)**2)#Distance formula
        if (currentDistance >= distance):
            atTarget = True
            publishTwist(0, 0)
        else:
            publishTwist(speed, 0)
            rospy.sleep(0.15)


def driveSmooth(speed, distance):
    """This function accepts a speed and a distance for the robot to move in a smoothed straight line."""
    global pose
    acceleration = .01
    ramp = 0
    initialX = pose.position.x
    initialY = pose.position.y
    atTarget = False
    #Loop until the distance between the attached frame and the origin is equal to the
    #distance specified 
    while (not atTarget and not rospy.is_shutdown()):
        currentX = pose.position.x
        currentY = pose.position.y
        currentDistance = math.sqrt((currentX-initialX)**2 + (currentY-initialY)**2)#Distance formula
        if (currentDistance >= distance):
            atTarget = True
            publishTwist(0, 0)
        else:
            if (ramp < speed):
                ramp = ramp + acceleration
            print "%d" % ramp
            publishTwist(ramp, 0)
            rospy.sleep(0.15)


def rotate(speed, angle):
    global odom_list
    global pose
    if (angle > 180 or angle<-180):
        print "angle is to large or small"
    vel = Twist();   
    done = True
    direction = 1

    # set rotation direction
    error = angle-math.degrees(pose.orientation.z)
    if (error > -180 and error < 0):
        direction = -1

    while ((abs(error) >= 2) and not rospy.is_shutdown()):
        publishTwist(0, direction*speed)
        rospy.sleep(0.15)    
        print "theta: %d" % math.degrees(pose.orientation.z)
        error = angle-math.degrees(pose.orientation.z)   
    vel.angular.z = 0.0
    pub.publish(vel)


def executeTrajectory():
    driveSmooth(.2, .6)
    curAng = math.degrees(pose.orientation.z)
    rotate(.2, curAng - 90)
    driveSmooth(.2, .45)
    curAng = math.degrees(pose.orientation.z) 
    rotate(.2, curAng + 135)
    """This function sequentially calls methods to perform a trajectory."""
    pass


def driveArc(radius, speed, angleArc):
    """This function works the same as rotate how ever it does not publish linear velocities."""
    #assuming radius is turning radius, speed is drive speed, angle is desired final angle
    #calculate wheel speeds and time to move from current pose to final pose
    #spinWheels with time and speeds to move to correct pose
    w = speed / radius
    v1 = w * (radius + .5*.352)
    v2 = w * (radius - .5*.352)

    global odom_list
    global pose
    vel = Twist();   
    done = True
 
    calcAngle = math.degrees(pose.orientation.z) + angleArc
    error = calcAngle-math.degrees(pose.orientation.z)

    while ((abs(error) >= 5) and not rospy.is_shutdown()):
        publishTwist((v1+v2)/2, w)
        rospy.sleep(0.15)    
        print "Angle: %d" % math.degrees(pose.orientation.z)
        error = calcAngle-math.degrees(pose.orientation.z)   
    vel.angular.z = 0.0
    pub.publish(vel)
    publishTwist(0,0)


def readBumper(msg):
    """Bumper event callback"""
    if (msg.state == 1):
        # What should happen when the bumper is pressed?
        #Stop forward motion if bumper is pressed
        print "Bumper pressed!"
        executeTrajectory()


#keeps track of current location and orientation
def tCallback(event):
	
    global pose
    global xPosition
    global yPosition
    global theta

    odom_list.waitForTransform('map', 'base_footprint', rospy.Time(0), rospy.Duration(1.0))
    (position, orientation) = odom_list.lookupTransform('map','base_footprint', rospy.Time(0))
    pose.position.x=position[0]
    pose.position.y=position[1]
    # the previous 2 lines and next 2 lines are repedative. Joes bad
    xPosition=position[0]
    yPosition=position[1]

    odomW = orientation
    q = [odomW[0], odomW[1], odomW[2], odomW[3]]
    roll, pitch, yaw = euler_from_quaternion(q)
    #convert yaw to degrees
    pose.orientation.z = yaw
    theta = math.degrees(yaw)


# This is the program's main function
if __name__ == '__main__':
    rospy.init_node('ngigliotti_lab2')
    global pub
    global pose
    global odom_list
    #global odom_tf
    pose = Pose()
    pub = rospy.Publisher('/cmd_vel_mux/input/teleop', Twist, None, queue_size=10) # Publisher for commanding robot motion
    bumper_sub = rospy.Subscriber('/mobile_base/events/bumper', BumperEvent, readBumper, queue_size=1) # Callback function to handle bumper events
    goal_sub = rospy.Subscriber('/rbe/goal', PoseStamped, navToPose, queue_size=1)

    rospy.Timer(rospy.Duration(.01), tCallback) # timer callback for robot location
    odom_list = tf.TransformListener() #listner for robot location
    rospy.sleep(.15)

    print "Starting Lab 2"

    #spinWheels(.2, -.2, 10)
    #driveStraight(.2, 1)
    #rotate(.5, -90)
    #driveSmooth(.5, 1)
    driveArc(1, .15, 180)
    #readBumper(BumperEvent)

    print "Done!"

    while not rospy.is_shutdown():
        rospy.spin()
    
    print "Lab 2 complete!"
